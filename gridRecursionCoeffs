#include <iostream>
#include <sstream>
#include <vector>
#include <iomanip>
#include <map>
using namespace std;

/**
  THIS CODE COUNTS NUMBER OF HAMILTONIAN PATHS CONNECTING
  ANY GIVEN STARTING CELL WITH ANY GIVEN ENDING CELL.

  CELLS ARE 0-INDEXED.  TO EXCLUDE A CELL (a,b), ADD
      grid[b-1][a-1].connections = 2;

  FOR HAMILTONIAN PATHS CONNECTING TOP LEFT WITH BOTTOM LEFT:
      grid[0][0].connections   = 1;    // STARTING CELL
      grid[0][C-1].connections = 1;    // ENDING CELL
    FOR INPUT 4 X   generates http://oeis.org/A181688
    FOR INPUT 5 X   generates http://oeis.org/A181689

  FOR HAMILTONIAN PATHS CONNECTING OPPOSITE CORNERS:
      grid[0][0].connections     = 1;    // STARTING CELL
      grid[R-1][C-1].connections = 1;    // ENDING CELL
    FOR INPUT 4 X   generates http://oeis.org/A014523
    FOR INPUT 5 X   generates http://oeis.org/A014584

  FOR HAMILTONIAN CYCLES:
      grid[0][0].connections = 1;    // STARTING CELL
      grid[0][1].connections = 1;    // ENDING CELL
    FOR INPUT 4 X   generates http://oeis.org/A006864
    FOR INPUT 5 X   generates http://oeis.org/A006865
    FOR INPUT 6 X   generates http://oeis.org/A145401
    FOR INPUT 7 X   generates http://oeis.org/A145416
    FOR INPUT 8 X   generates http://oeis.org/A145418
    FOR INPUT 9 X   generates http://oeis.org/A160149
**/

using  u64 = uint64_t;
using  u32 = uint32_t;

template <uint32_t mod>  // MOD INT STORED IN MONTGOMERY FORM
class  Mint
{
  private:
    using  i32 = int32_t;    using  i64 = int64_t;
    using  u32 = uint32_t;   using  u64 = uint64_t;

    static constexpr u32  get_r()  {
        u32  ret = mod;
        for( i32 i=0 ; i<4 ; ++i )  ret *= 2 - mod * ret;
        return  ret;
    }

    static constexpr u32  reduce( const u64 &b )  {
        return ( b + u64( u32( b ) * u32( -r ) ) * mod ) >> 32;
    }

    // CLASS MEMBER DATA
    static constexpr u32  r  = get_r();
    static constexpr u32  n2 = -u64( mod ) % mod;
	u32                   a;

    static_assert( r * mod == 1, "invalid, r * mod != 1" );
    static_assert( mod < (1 << 30), "invalid, mod >= 2 ^ 30" );
    static_assert( (mod & 1) == 1, "invalid, mod % 2 == 0" );

  public:
    // CONSTRUCTORS
    constexpr Mint() : a( 0 ) {}
    constexpr Mint( i64 b )
        : a( reduce( u64( b % mod + mod ) * n2 ) ) {};

    // ARITMETIC OPERATORS
    constexpr Mint &operator += ( const Mint &b )  {
        if( i32( a += b.a - 2 * mod ) < 0 )   a += 2 * mod;
        return  *this;
    }
    constexpr Mint &operator -= ( const Mint &b )  {
        if( i32( a -= b.a ) < 0 )   a += 2 * mod;
        return  *this;
    }
    constexpr Mint &operator *= ( const Mint &b )  {
        a = reduce( u64( a ) * b.a );
        return  *this;
    }
    constexpr Mint &operator /= ( const Mint &b )  {
        *this *= b.inverse();
        return  *this;
    }

    constexpr Mint operator  + (const Mint &b) const { return Mint(*this) += b; }
    constexpr Mint operator  - (const Mint &b) const { return Mint(*this) -= b; }
    constexpr Mint operator  * (const Mint &b) const { return Mint(*this) *= b; }
    constexpr Mint operator  / (const Mint &b) const { return Mint(*this) /= b; }
    constexpr Mint operator - () const {  return  Mint() - Mint(*this); }
    Mint& operator         ++ ()  { return  *this += Mint( 1 ); }
    Mint& operator         -- ()  { return  *this -= Mint( 1 ); }

    constexpr Mint  pow( u64 n ) const  {
        Mint  ret(  1 ), mul( *this );
        while( n > 0 )  { if( n & 1 )  ret *= mul;   mul *= mul;  n >>= 1; }
        return  ret;
    }
    constexpr Mint  inverse() const { return  pow( mod - 2 ); }
    constexpr u32  get() const  {
        u32  ret = reduce( a );
        return  ret >= mod ? ret - mod : ret;
    }
    static constexpr u32  get_mod()  { return mod; }

    constexpr bool operator == (const Mint &b) const {
        return ( a >= mod ? a - mod : a ) == ( b.a >= mod ? b.a - mod : b.a );
    }
    constexpr bool operator != (const Mint &b) const  {
        return ( a >= mod ? a - mod : a ) != ( b.a >= mod ? b.a - mod : b.a );
    }

    // INPUT AND OUTPUT
    friend ostream &operator << ( ostream &os, const Mint &b )  {
        return  os << b.get();
    }
    friend istream &operator >> ( istream &is, Mint &b )  {
        int64_t  t;  is >> t;
        b = Mint( t );
        return  is;
    }
};
constexpr int  MOD = 1000000007;
using  mint = Mint<MOD>;

class Cell
{
  public:
    Cell*  pathEnd;
    int    connections;

  public:
    // TWO CELLS ARE "EQUAL" IF THEY HAVE SAME  pathEnd  VALUES.
    // USED WHEN DETECTING CYCLES.
    bool operator < ( const Cell& r2 ) const
    {  return this->pathEnd < r2.pathEnd;  }
};

class Connection
{
  private:
    Cell*  m_cell;
    Cell*  m_nbr;
    Cell*  m_cellEnd;
    Cell*  m_nbrEnd;
    bool   m_connected;

  public:
    Connection( Cell* r, Cell* n )  {
        m_cell      = r;
        m_nbr       = n;
        m_connected = false;

        if( m_cell->connections != 2  &&  m_nbr->connections != 2 )  {
            // CHECK FOR CYCLE
            if( m_cell != m_nbr->pathEnd )  {
                // UPDATE PATH ENDPOINTS
                m_cellEnd          = m_cell->pathEnd;
                m_nbrEnd           = m_nbr->pathEnd;
                m_connected        = true;
                m_cellEnd->pathEnd = m_nbrEnd;
                m_nbrEnd->pathEnd  = m_cellEnd;
                ++m_cell->connections;
                ++m_nbr->connections;
            }
        }
    }

    ~Connection()  {
        // RESTORE TO ORIGINAL CONDITION
        if( m_connected )  {
            m_cellEnd->pathEnd = m_cell;
            m_nbrEnd->pathEnd  = m_nbr;
            --m_cell->connections;
            --m_nbr->connections;
        }
    }

    inline operator bool() const { return m_connected; }
};

template< typename T >
class  Grid
{
    using  StateList = map< vector<Cell>, T >;

  private:
    size_t                  R;
    size_t                  C;
    vector< vector<Cell> >  grid;

  public:
    Grid() : R( 1 ), C( 1 ), grid( {{1}} ) {}

    Grid( size_t r, size_t c ) : R( r ), C( c )  {
        grid.resize( r + 1 );
        for( size_t r=0 ; r<=R ; ++r )  {
            grid[r].resize( C + 1 );
            for( size_t c=0 ; c<=C ; ++c )  {
                Cell* cell    = &grid[r][c];
                cell->pathEnd = cell;
                if( c < C  &&  r < R )    cell->connections = 0;
                else                      cell->connections = 2;
            }
        }
    }

    void  setEndpoints( size_t r1, size_t c1, size_t r2, size_t c2 )  {
        grid[r1][c1].connections = 1;   grid[r2][c2].connections = 1;
    }

    T  solve()  {
        T  solutions = 0;

        // INITIALIZE  curStates  WITH FIRST ROW, SET COUNT = 1
        StateList  curStates;
        curStates[grid[0]] = 1;

        for( size_t row=0 ; row<R ; ++row )  {
            StateList  nextStates;

            for( auto cur : curStates )  {
                // PLACE CURRENT STATE IN ROW  row
                grid[row]   = cur.first;
                T  curCount = cur.second;

                // ENSURE pathEnd POINTS TO cell FOR ALL col ENTRIES.
                for( size_t col=0 ; col<C ; ++col )  {
                    Cell* cell             = &grid[row][col];
                    cell->pathEnd->pathEnd = cell;
                }
                solve( nextStates, curCount, row, 0, solutions );
            }
            curStates = nextStates;
        }
        return  solutions;
    }

  private:
    void  solve( StateList &nextStates, const T &curCount,
                 size_t row, size_t col, T &solutions )  {
        if( col == C )  {
            if( row + 1 == R )  solutions += curCount;
            else                nextStates[grid[row + 1]] += curCount;
            return;
        }

        Cell  *cell      = &grid[row][col];
        Cell  *cellRight = &grid[row][col + 1];
        Cell  *cellDown  = &grid[row + 1][col];

        if( cell->connections == 2 )
            return  solve( nextStates, curCount, row, col + 1, solutions );

        if( cell->connections == 0 )  {
            if( auto cr = Connection( cell, cellRight ) )
                if( auto cd = Connection( cell, cellDown ) )
                    solve( nextStates, curCount, row, col + 1, solutions );
            return;
        }

        if( auto cr = Connection( cell, cellRight ) )
            solve( nextStates, curCount, row, col + 1, solutions );

        if( auto cd = Connection( cell, cellDown ) )
            solve( nextStates, curCount, row, col + 1, solutions );
    }
};

vector<mint>  berlekampMassey( const vector<mint> &S )  {
    size_t  n = S.size(),  L = 0,  m = 0;
    vector<mint>  C( n ), B( n ), T;
    C[0] = B[0] = 1;
    mint  b = 1;

    for( size_t i=0 ; i<n ; ++i )  {
       ++m;
       mint  d = S[i];
       for( size_t j=1 ; j<=L ; ++j )   d += C[j]*S[i - j];
       if( d == 0 )    continue;
       T = C;
       mint  coef = d*b.inverse();
       for( size_t j=m ; j<n ; ++j )    C[j] -= coef*B[j - m];
       if( 2*L > i )   continue;
       L = i + 1 - L;  B = T;  b = d;  m = 0;
    }
    C.resize( L + 1 );
    C.erase( C.begin() );
    for( auto &x : C )   x = -x;
    return  C;
}


int  main()
{
    ios_base::sync_with_stdio( false );
    cin.tie( NULL );

    size_t  R, C;
    cin >> R >> C;

    vector< Mint<MOD> >  tallys;
    for( size_t i=1 ; i<R ; ++i )  {
        Grid< Mint<MOD> >  G( i, C );
        G.setEndpoints( 0, 0, 0,  C - 1 );
        auto  ans = G.solve();
        tallys.push_back( ans );
    }

    // CALCULATE RECURSION COEFFICIENTS
    auto  ans = berlekampMassey( tallys );

    cout << "SIZE: " << ans.size() << '\n';
    for( size_t i=0 ; i<ans.size() ; ++i )  cout << ans[i] << " ";
    cout << '\n';

    return  0;
}
